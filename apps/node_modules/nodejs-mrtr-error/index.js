let config = {
    code: '',
    codeType: '',
    systemMessage: '',
    module: '',
    language: '',
    replaceMessage:[],
    status:500
};

module.exports = class mrtrError extends Error {
    constructor(config) {
        let _status = config.status || 500;
        let _error = null;
        let _module = config.module || "MRTR";
        let _language = config.language || "TH";
        super();
        Error.captureStackTrace(this, this.constructor);
        this.codeType = config.codeType || "S";
        this.code = config.code || '55001';
        this.desc = config.desc || config.description || "ขออภัยค่ะ ระบบขัดข้อง";
        this.systemMessage = config.systemMessage || "";
        this.replaceMessage = config.replaceMessage || [];
        this.responseDateTime = "";
        this.data = {"status" :"failed"};
        this.setStatus = (status) => {
            _status = status;
        };
        this.getStatus = () => {
            return _status;
        };
        this.setError = (err) => {
            _error = err;
        };
        this.getError = () => {
            return _error;
        };
        this.setModule = (mod) => {
            _module = mod;
        };
        this.getModule = () => {
            return _module;
        };
        this.setLanguage = (lang) => {
            _language = lang;
        };
        this.getLanguage = () => {
            return _language;
        };
    }

    hasInfo() {
        return this.getError() != null;
    }

    async loadInfo() {
        const moment = require('moment');
        const db = require('../../models_readonly');
        var date = moment();
        date.year(date.year() + 543)
        let responseDateTime = moment(date).format("DD-MM-YYYY HH:mm");
        this.responseDateTime = responseDateTime;
        this.data = {"status" :"failed"};
        const cond = {
            legacyErrorCode: this.code,
            system: this.getModule(),
            language: this.getLanguage().toUpperCase()
        };
        let error = await db.ErrorMessage.findOne({
            where: cond
        }).catch((e) => {
            console.log(e);
        });

        if (error != null) {
            this.setError(error);
            let legacyCode = this.code || '55001';
            this.code = error.mrtrErrorCode;
            this.desc = this.replaceMessageFromValue( error.mrtrErrorDescription ,this.replaceMessage);
            if (!this.systemMessage) {
                this.systemMessage = "[Code : " + legacyCode + "] " + error.legacyErrorDescription;
            } else {
                this.systemMessage = "[Code : " + legacyCode + "] " + this.systemMessage;
            }
            this.codeType = error.errorType;
            this.setModule(error.system);
        }else{
            this.codeType = "T";
            let legacyCode = this.code || '55001';
            this.code = '10055001';
            this.systemMessage = "[Code : " + legacyCode + "] " + this.systemMessage;
        }
    }

    static async create(config) {
        const db = require('../../models_readonly');
        const moment = require('moment');
        var date = moment();
        date.year(date.year() + 543)
        let responseDateTime = moment(date).format("DD-MM-YYYY HH:mm");
        config.language = config.language || "TH";
        let error = await db.ErrorMessage.findOne({
            where: {
                legacyErrorCode: config.code || this.code || '55001',
                system: config.module || "MRTR",
                language: config.language.toUpperCase()
            }
        });
        let retError = new mrtrError(config);
        retError.responseDateTime = responseDateTime;
        retError.data = {"status" :"failed"};
        if (error != null) {
            retError.setError(error);
            retError.code = error.mrtrErrorCode;
            retError.desc = retError.replaceMessageFromValue( error.mrtrErrorDescription ,this.replaceMessage);
            let legacyCode = config.code || '55001';
            if (config.systemMessage != null) {
                retError.systemMessage = "[Code : " + legacyCode + "] " + config.systemMessage;
            } else {
                retError.systemMessage = "[Code : " + legacyCode + "] " + error.legacyErrorDescription;
            }
            retError.codeType = error.errorType;
            retError.setModule(error.system);
        }else{
            retError.codeType = "T";
            let legacyCode = config.code || '55001';
            retError.code = '10055001';
            retError.systemMessage = "[Code : " + legacyCode + "] " + config.systemMessage;
        }
        return retError;
    }

    replaceMessageFromValue(errorMessage , replaceMessage) {
        var objMsg = errorMessage;
        if(replaceMessage && replaceMessage.length > 0){
            for (let index = 0; index < replaceMessage.length ; index++) {
                 objMsg = objMsg.replace("{"+index+"}",replaceMessage[index])
            }
        }
        return objMsg;
    }

    async handleErrorMessage(respObj, moduleService) {

        switch (moduleService) {
            case "DSV":
                let mapLegacyErrorCode = await this.getMapLegacyErrorCode(respObj.Result.Code, moduleService, respObj.Result.Message);
                throw new mrtrError({
                    code: mapLegacyErrorCode,
                    module: moduleService,
                    systemMessage: respObj.Result.Message
                });

            case "ESB":
                let errorMessageObj = await this.extractErrorMessage(respObj);

                if (errorMessageObj.code != "") {
                    throw new mrtrError({
                        code: errorMessageObj.code,
                        module: errorMessageObj.module,
                        systemMessage: errorMessageObj.systemMessage
                    });
                }
                break;

            case "OMR":
                throw new mrtrError({
                    code: respObj.error.code,
                    module: moduleService,
                    systemMessage: respObj.error.en
                });
            case "OMR2":
                throw new mrtrError({
                    code: respObj.error.code,
                    module: "OMR",
                    systemMessage: respObj.error.systemMessage
                });

            case "OM":
                if (respObj.MESSAGE_SQLCODE) {
                    throw new mrtrError({
                        code: respObj.MESSAGE_SQLCODE + "",
                        module: moduleService,
                        systemMessage: respObj.MESSAGE_TEXT_ENG
                    });
                } else {
                    throw new mrtrError({
                        code: "55001",
                        module: moduleService,
                        systemMessage: "invalid message"
                    });
                }
            case "OM_SPECIAL":
                if (respObj.MESSAGE_SQLCODE) {
                    let mapLegacyErrorCodeOM = await this.getMapLegacyErrorCode(respObj.MESSAGE_SQLCODE + "", "OM", respObj.MESSAGE_TEXT_ENG);
                    throw new mrtrError({
                        code: mapLegacyErrorCodeOM,
                        module: "OM",
                        systemMessage: respObj.MESSAGE_TEXT_ENG
                    });
                } else {
                    throw new mrtrError({
                        code: "55001",
                        module: "OM",
                        systemMessage: "invalid message"
                    });
                }
            case "API_GATEWAY":
                if(respObj.error){
                    let mapLegacyErrorCodeAPIGW = await this.getMapLegacyErrorCode(respObj.error.code + "", "API_GATEWAY", respObj.error.description);
                    throw new mrtrError({
                        code: mapLegacyErrorCodeAPIGW,
                        module: moduleService,
                        systemMessage: respObj.error.description
                    });
                }else{
                    throw new mrtrError({
                        code: "55001",
                        module: moduleService,
                        systemMessage: "invalid message"
                    });

                }
            case "CBS":
                if (respObj.ResponseStatus.StatusCode.value == 'E') {
                    throw new mrtrError({
                        code: respObj.ResponseStatus.SystemResponseCode.value,
                        module: moduleService,
                        systemMessage: respObj.ResponseStatus.SystemResponseMessage.value
                    });
                }
                break;
            case "CMS":
                if (respObj.messageHeader.status.toUpperCase() == "ERROR") {
                    throw new mrtrError({
                        code: respObj.messageHeader.errorCode,
                        module: moduleService,
                        systemMessage: respObj.messageHeader.errorDescription
                    });
                }
                break;
            case "USSD":
                let errorMessageUssdObj = await this.extractUSSDErrorMessage(respObj , moduleService);

                if (errorMessageUssdObj.code != "") {
                    throw new mrtrError({
                        code: errorMessageUssdObj.code,
                        module: errorMessageUssdObj.module,
                        systemMessage: errorMessageUssdObj.systemMessage
                    });
                }
                break;
            case "RD":
                if (respObj.status.type.toUpperCase() != 'S') {
                    throw new mrtrError({
                        code: respObj.status.code,
                        module: moduleService,
                        systemMessage: respObj.status.description
                    });
                }
                break;
            default:
                return new mrtrError({
                    code: "",
                    systemMessage: "invalid message"
                });
        }

    }

    async getMapLegacyErrorCode(legacyErrorCode, serviceName, legacyErrorDescription) {

        const db = require('../../models_readonly');
        try {
            let result = await db.legacyErrorMessageMap.findAll({
                where: {
                    legacyErrorCode: legacyErrorCode,
                    serviceName: serviceName,
                    legacyErrorDescription: legacyErrorDescription
                }
            }).then(data => {
                return data.length > 0 ? data : null
            }).catch(function (error) {
                return null;
            });

            return result == null ? legacyErrorCode : result[0].mapLegacyErrorCode;
        } catch (error) {
            return legacyErrorCode;
        }
    }

    async extractErrorMessage(Envelope) {

        var errorMessageObj = {
            code: "",
            module: "",
            systemMessage: ""
        }
        try {
            if (Envelope.Header.ResponseHeader.Status.value.toUpperCase() == "ERROR") {
                var startIndex = 0;
                var endIndex = 0;
                var temp = "";
                var sourceText = Envelope.Header.ResponseHeader.ErrorDescription.value
                if (sourceText != null) {
                    startIndex = sourceText.indexOf("(");
                    endIndex = sourceText.indexOf(")");

                    if (startIndex != -1 && endIndex != -1) {
                        startIndex += 1;
                    }
                }

                if (startIndex < endIndex) {
                    temp = sourceText.substring(startIndex, endIndex);

                    if (temp.indexOf("-") > 0) {
                        errorMessageObj.module = temp.split("-")[0];
                        errorMessageObj.code = temp.split("-")[1];
                        errorMessageObj.systemMessage = sourceText.substring(endIndex + 2, sourceText.length).trim();

                    }
                }else{
                    var errorCodeESB = Envelope.Header.ResponseHeader.ErrorCode.value
                    errorMessageObj.module = errorCodeESB.split("_")[0];
                    errorMessageObj.code = errorCodeESB.split("_")[1];
                    errorMessageObj.systemMessage = sourceText;
                }
            }
        } catch (error) {}

        return errorMessageObj;
    }
    async extractUSSDErrorMessage(resXml , module) {

        var errorMessageObj = {
            code: "",
            module: "",
            systemMessage: ""
        }
        try {
            if (resXml.InqrDiscAmntResponse.InqrDiscAmntResp.Stts.value != '0'){
                errorMessageObj.module = module;
                errorMessageObj.code = resXml.InqrDiscAmntResponse.InqrDiscAmntResp.ErrCode.value;
                errorMessageObj.systemMessage = resXml.InqrDiscAmntResponse.InqrDiscAmntResp.ErrMesg.value;
            }

        } catch (error) {}

        return errorMessageObj;
    }
};