'use strict';

let fs = require('fs');
let path = require('path');
let util = require('util');
let moment = require('moment');
let common = require('winston/lib/winston/common');
let Transport = require('winston').Transport;
let Stream = require('stream').Stream;
let os = require('os');
let winston = require('winston');
let mkdirp = require('mkdirp');
let zlib = require('zlib');

let weekday = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];

//
// ### function DailyRotateFile (options)
// #### @options {Object} Options for this instance.
// Constructor function for the DailyRotateFile transport object responsible
// for persisting log messages and metadata to one or more files.
//
let DailyRotateFile = module.exports = function (options) {
    Transport.call(this, options);

    //
    // Helper function which throws an `Error` in the event
    // that any of the rest of the arguments is present in `options`.
    //
    function throwIf(target /* , illegal... */) {
        Array.prototype.slice.call(arguments, 1).forEach(function (name) {
            if (options[name]) {
                throw new Error('Cannot set ' + name + ' and ' + target + 'together');
            }
        });
    }

    if (options.filename || options.dirname) {
        throwIf('filename or dirname', 'stream');
        let hostName = process.env.HOSTNAME ? process.env.HOSTNAME : '';
        hostName = hostName.split("-");
        let hostNameDisplayLog = "";
        if(hostName.length && hostName.length >= 2){
            hostNameDisplayLog = hostName[hostName.length - 2] + hostName[hostName.length - 1];
        }else{
            hostNameDisplayLog = hostName;
        }

        let datePattern = "yyyyMMDD";
        let currentDate = moment(new Date()).format(datePattern);
        let filename = options.filename.replace('${dockerId}', hostNameDisplayLog);
        filename = filename.replace('${date}', currentDate);

        let osPlatform = process.platform; 
        /* ########## support OS windows and other #######*/ 
        if(osPlatform){
            if(osPlatform.toString().startsWith("win")){
                // windows os
                if(filename.startsWith("/")){
                    filename = "."+filename;
                }
            }else  if(osPlatform.toString().startsWith("darwin")){
                // mac os
                if(filename.startsWith("/")){
                    filename = filename.substring(1);
                }else if(filename.startsWith("./")){
                    filename = filename.substring(2);
                }
            } else{
                // other os
                if(filename.startsWith(".")){
                    filename = filename.substring(1);
                }
            }
        }
        
        this._basename = this.filename = filename ? path.basename(filename) : 'winston.log';
        let baseNameRemoveFile = this._basename.replace(hostNameDisplayLog , "");
        this._baseNameRemoveFile = baseNameRemoveFile;

        this.dirname = options.dirname || path.dirname(filename);
        this.options = options.options || {flags: 'a'};
        
        //
        // "24 bytes" is maybe a good value for logging lines.
        //
        this.options.highWaterMark = this.options.highWaterMark || 24;
    } else if (options.stream) {
        throwIf('stream', 'filename', 'maxSize');
        this._stream = options.stream;
        let self = this;
        this._stream.on('error', function (error) {
            self.emit('error', error);
        });

        //
        // We need to listen for drain events when
        // write() returns false. This can make node
        // mad at times.
        //
        this._stream.setMaxListeners(Infinity);
    } else {
        throw new Error('Cannot log to file without filename or stream.');
    }

    this.json = options.json !== false;
    this.colorize = options.colorize || false;
    this.maxSize = options.maxSize || null;
    this.logstash = options.logstash || null;
    this.maxFiles = options.maxFiles || null;
    this.label = options.label || null;
    this.prettyPrint = options.prettyPrint || false;
    this.showLevel = options.showLevel === undefined ? true : options.showLevel;
    this.timestamp = options.timestamp === undefined ? true : options.timestamp;
    this.datePattern = options.datePattern ? options.datePattern : '.yyyy-MM-dd';
    this.depth = options.depth || null;
    this.eol = options.eol || os.EOL;
    this.maxRetries = options.maxRetries || 2;
    this.formatCurrent = options.formatCurrent === undefined ? true : options.formatCurrent;
    this.prepend = options.prepend || false;
    this.append = options.append === undefined ? true : options.append;
    this.createTree = options.createTree || false;
    this.localTime = options.localTime || false;
    this.zippedArchive = options.zippedArchive || false;
    this.maxDays = options.maxDays || 0;

    if (this.json) {
        this.stringify = options.stringify;
    }

    //
    // Internal state variables representing the number
    // of files this instance has created and the current
    // size (in bytes) of the current logfile.
    //
    this._size = 0;
    this._created = 0;
    this._buffer = [];
    this._draining = false;
    this._failures = 0;
    this._archive = false;
    this._fileExpireWhenRunning = false;

    // Internal variable which will hold a record of all files
    // belonging to this transport which are currently in the
    // log directory in chronological order.
    //
    this._currentFiles = function () {
        //
        // Only proceed if maxSize is not configured for this transport.
        if (!this.maxSize) {
            try {
                return fs.readdirSync(this.dirname).filter(function (file) {
                    return file.includes(this._basename);
                }.bind(this)).map(function (file) {
                    return {
                        name: file,
                        time: fs.statSync(path.join(this.dirname, file)).mtime.getTime()
                    };
                }.bind(this)).sort(function (a, b) {
                    return a.time - b.time;
                }).map(function (v) {
                    return v.name;
                });
            } catch (e) {
                // directory doesnt exist so there are no files. Do nothing.
            }
        }
        return [];
    }.bind(this)();

    this._year = this._getTime('year');
    this._month = this._getTime('month');
    this._date = this._getTime('date');
    this._hour = this._getTime('hour');
    this._minute = this._getTime('minute');
    this._weekday = weekday[this._getTime('day')];
    let token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhM])\1?/g;
    let pad = function (val, len) {
        val = String(val);
        len = len || 2;
        while (val.length < len) {
            val = '0' + val;
        }
        return val;
    };

    this.getFormattedDate = function (genDate) {
        // update the year, month, date... variables
        this._year = this._getTime('year', genDate);
        this._month = this._getTime('month', genDate);
        this._date = this._getTime('date', genDate);
        this._hour = this._getTime('hour', genDate);
        this._minute = this._getTime('minute', genDate);
        this._weekday = weekday[this._getTime('day', genDate)];

        let flags = {
            yy: String(this._year).slice(2),
            yyyy: this._year,
            M: this._month + 1,
            MM: pad(this._month + 1),
            d: this._date,
            dd: pad(this._date),
            H: this._hour,
            HH: pad(this._hour),
            m: this._minute,
            mm: pad(this._minute),
            ddd: this._weekday
        };
        return this.datePattern.replace(token, function ($0) {
            return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);
        });
    };
};


//
// ### function log (level, msg, [meta], callback)
// #### @level {string} Level at which to log the message.
// #### @msg {string} Message to log
// #### @meta {Object} **Optional** Additional metadata to attach
// #### @callback {function} Continuation to respond to when complete.
// Core logging method exposed to Winston. Metadata is optional.
//
DailyRotateFile.prototype.log = function (level, msg, meta, callback) {
    if (this.silent) {
        return callback(null, true);
    }

    //
    // If failures exceeds maxRetries then we can't access the
    // stream. In this case we need to perform a noop and return
    // an error.
    //
    if (this._failures >= this.maxRetries) {
        return callback(new Error('Transport is in a failed state.'));
    }

    let self = this,
        errs     = [],
        isError  = function(a) { return a instanceof Error };

    if (meta instanceof Error || meta.stack != null) {
        errs = [meta];
        meta = {};
    } else if (meta.error instanceof Error) {
        errs = [meta.error];
        delete meta.error;
    } else if (meta.errors && _(meta.errors).every(isError)) {
        errs = meta.errors;
        delete meta.errors;
    }


    let output = common.log({
        level: level,
        message: msg,
        meta: meta,
        json: this.json,
        colorize: this.colorize,
        logstash: this.logstash,
        prettyPrint: this.prettyPrint,
        timestamp: this.timestamp,
        label: this.label,
        stringify: this.stringify,
        showLevel: this.showLevel,
        depth: this.depth,
        formatter: this.formatter,
        handleExceptions: this.handleExceptions,
        humanReadableUnhandledException: this.humanReadableUnhandledException
    }) + this.eol;

    // finally attach the processed result
    if (errs && errs.length) {
        errs.forEach((v,i,a) => {
            if (v.stack instanceof Array || v.stack.join)
                output += v.stack.join(this.eol) + this.eol;
            else
                output += v.stack + this.eol;
        });
    }

    this._size += output.length;

    if (this.filename) {
        this.open(function (err) {
            if (err) {
                //
                // If there was an error enqueue the message
                //
                return self._buffer.push([output, callback]);
            }

            self._write(output, callback);
            self._lazyDrain();
        });
    } else {
        //
        // If there is no `filename` on this instance then it was configured
        // with a raw `WriteableStream` instance and we should not perform any
        // size restrictions.
        //
        this._write(output, callback);
        this._lazyDrain();
    }
};

//
// ### function _write (data, cb)
// #### @data {String|Buffer} Data to write to the instance's stream.
// #### @cb {function} Continuation to respond to when complete.
// Write to the stream, ensure execution of a callback on completion.
//
DailyRotateFile.prototype._write = function (data, callback) {
    // If this is a file write stream, we could use the builtin
    // callback functionality, however, the stream is not guaranteed
    // to be an fs.WriteStream.
    let ret = this._stream.write(data);
    if (!callback) {
        return;
    }

    if (ret === false) {
        return this._stream.once('drain', function () {
            callback(null, true);
        });
    }
    callback(null, true);
};

//
// ### function query (options, callback)
// #### @options {Object} Loggly-like query options for this instance.
// #### @callback {function} Continuation to respond to when complete.
// Query the transport. Options object is optional.
//
DailyRotateFile.prototype.query = function (options, callback) {
    if (typeof options === 'function') {
        callback = options;
        options = {};
    }
    let self = this;

    // TODO when maxfilesize rotate occurs
    let createdFiles = self._currentFiles.slice(0); // Clone already sorted _currentFiles array
    let results = [];
    let row = 0;
    options = self.normalizeQuery(options);

    if (createdFiles.length === 0 && callback) {
        callback(null, results);
    }

    // Edit so that all created files are read:
    (function readNextFile(nextFile) {
        if (!nextFile) {
            return;
        }
        let file = path.join(self.dirname, nextFile);
        let buff = '';

        let stream = fs.createReadStream(file, {
            encoding: 'utf8'
        });

        stream.on('error', function (err) {
            if (stream.readable) {
                stream.destroy();
            }
            if (!callback) {
                return;
            }
            return err.code === 'ENOENT' ? callback(null, results) : callback(err);
        });

        stream.on('data', function (data) {
            data = (buff + data).split(/\n+/);
            let l = data.length - 1;
            let i = 0;

            for (; i < l; i++) {
                if (!options.start || row >= options.start) {
                    add(data[i]);
                }
                row++;
            }

            buff = data[l];
        });

        stream.on('close', function () {
            if (buff) {
                add(buff, true);
            }
            if (options.order === 'desc') {
                results = results.reverse();
            }

            if (createdFiles.length) {
                readNextFile(createdFiles.shift());
            } else if (callback) {
                callback(null, results);
            }
        });

        function add(buff, attempt) {
            try {
                let log = JSON.parse(buff);
                if (check(log)) {
                    push(log);
                }
            } catch (e) {
                if (!attempt) {
                    stream.emit('error', e);
                }
            }
        }

        function push(log) {
            if (options.rows && results.length >= options.rows && options.order !== 'desc') {
                if (stream.readable) {
                    stream.destroy();
                }
                return;
            }

            if (options.fields) {
                let obj = {};
                options.fields.forEach(function (key) {
                    obj[key] = log[key];
                });
                log = obj;
            }

            if (options.order === 'desc') {
                if (results.length >= options.rows) {
                    results.shift();
                }
            }
            results.push(log);
        }

        function check(log) {
            if (!log) {
                return;
            }

            if (typeof log !== 'object') {
                return;
            }

            let time = new Date(log.timestamp);
            if ((options.from && time < options.from) ||
                (options.until && time > options.until)) {
                return;
            }

            return true;
        }
    })(createdFiles.shift());// executes the function
};

//
// ### function stream (options)
// #### @options {Object} Stream options for this instance.
// Returns a log stream for this transport. Options object is optional.
//
DailyRotateFile.prototype.stream = function (options) {
    let file = path.join(this.dirname, this._getFilename());
    options = options || {};
    let stream = new Stream();

    let tail = {
        file: file,
        start: options.start
    };

    stream.destroy = common.tailFile(tail, function (err, line) {
        if (err) {
            return stream.emit('error', err);
        }

        try {
            stream.emit('data', line);
            line = JSON.parse(line);
            stream.emit('log', line);
        } catch (e) {
            stream.emit('error', e);
        }
    });

    if (stream.resume) {
        stream.resume();
    }

    return stream;
};

//
// ### function open (callback)
// #### @callback {function} Continuation to respond to when complete
// Checks to see if a new file needs to be created based on the `maxSize`
// (if any) and the current size of the file used.
//
DailyRotateFile.prototype.open = function (callback) {
    if (this.opening) {
        //
        // If we are already attempting to open the next
        // available file then respond with a value indicating
        // that the message should be buffered.
        //
        return callback(true);
    } else if (!this._stream || (this.maxSize && this._size >= this.maxSize) ||
        this._filenameHasExpired()) {
        this._cleanOldFiles();
        //
        // If we dont have a stream or have exceeded our size, then create
        // the next stream and respond with a value indicating that
        // the message should be buffered.
        //
        callback(true);
        return this._createStream();
    }

    //
    // Otherwise we have a valid (and ready) stream.
    //
    callback();
};

//
// ### function close ()
// Closes the stream associated with this instance.
//
DailyRotateFile.prototype.close = function () {
    let self = this;

    if (this._stream) {
        this._stream.end();
        this._stream.destroySoon();

        this._stream.once('drain', function () {
            self.emit('flush');
            self.emit('closed');
        });
    }
};

//
// ### function flush ()
// Flushes any buffered messages to the current `stream`
// used by this instance.
//
DailyRotateFile.prototype.flush = function () {
    let self = this;

    //
    // Iterate over the `_buffer` of enqueued messaged
    // and then write them to the newly created stream.
    //
    this._buffer.forEach(function (item) {
        let str = item[0];
        let callback = item[1];

        process.nextTick(function () {
            self._write(str, callback);
            self._size += str.length;
        });
    });

    //
    // Quickly truncate the `_buffer` once the write operations
    // have been started
    //
    self._buffer.length = 0;

    //
    // When the stream has drained we have flushed
    // our buffer.
    //
    self._stream.once('drain', function () {
        self.emit('flush');
        self.emit('logged');
    });
};

//
// ### @private function _createStream ()
// Attempts to open the next appropriate file for this instance
// based on the common state (such as `maxSize` and `_basename`).
//
DailyRotateFile.prototype._createStream = function () {
    let self = this;
    this.opening = true;

    (function checkFile(target) {
        let fullname = path.join(self.dirname, target);
        //
        // Creates the `WriteStream` and then flushes any
        // buffered messages.
        //
        function createAndFlush(size) {
            if (self.createTree) {
                mkdirp.sync(path.dirname(fullname));
            }


            if (self._stream) {

                if (self.formatCurrent) {
                    self._archive = self.zippedArchive ? self._stream.path : false;
                } else {

                   /* if (self._filenameHasExpired()) {
                             self._archive = self.zippedArchive ?
                                    path.join(self.dirname, self._getPreviousFilename()) : false;
                                self._stream.end();
                                self._stream.destroySoon();

                    }else */

                    if (self._fileExpireWhenRunning == true) {
                            self._fileExpireWhenRunning = false;
                            console.log("self._fileExpireWhenRunning : " + fullname)
                            self._archive = self.zippedArchive ? path.join(self.dirname, self._getPreviousFilename()) : false;

                            /** ####### close stream before create stream */
                            if (self._stream) {
                                self._stream.close();
                                self._stream.destroySoon();
                            }
                            
                            self._year = self._getTime('year');
                            self._month = self._getTime('month');
                            self._date = self._getTime('date');

                    }else if (self._created && self._size >= self.maxSize) {
                        self._archive = self.zippedArchive ?
                            path.join(self.dirname, self._getPreviousFilename(new Date())) + '.' + self._created : false;

                        /** ####### close stream before create stream */
                        if (self._stream) {
                            self._stream.close();
                            self._stream.destroySoon();
                        }
                    }
                }
            } else if (!self.formatCurrent) {

                if (fs.existsSync(fullname)) {
                    let stat = fs.statSync(fullname);
                    let modified_date = moment(stat.mtime);
                    let today = moment().startOf("day");

                    let isBefore = modified_date.utc().isBefore(today.utc());
                    if (self.localTime) isBefore = modified_date.isBefore(today);

                    if (isBefore) {
                        self._archive = self.zippedArchive ? path.join(self.dirname, self._getPreviousFilename(modified_date.toDate())) : false;

                        processRotate(modified_date.toDate());

                        /** ####### close stream before create stream */
                        if (self._stream) {
                            self._stream.close();
                            self._stream.destroySoon();
                        }
                    }
                }
            }

            self._size = size;
            self.filename = target;

            if (self._stream) {
                self._stream.close();
                self._stream.destroySoon();
            }
            self._stream = fs.createWriteStream(fullname, self.options);
            self._stream.on('error', function (error) {
                
                if (self._failures < self.maxRetries) {
                    self._createStream();
                    self._failures++;
                } else {
                    self.emit('error', error);
                }
            });

            //
            // We need to listen for drain events when
            // write() returns false. This can make node
            // mad at times.
            //
            self._stream.setMaxListeners(Infinity);

            //
            // When the current stream has finished flushing
            // then we can be sure we have finished opening
            // and thus can emit the `open` event.
            //
            self.once('flush', function () {
                // Because "flush" event is based on native stream "drain" event,
                // logs could be written inbetween "self.flush()" and here
                // Therefore, we need to flush again to make sure everything is flushed
                self.flush();

                self.opening = false;
                self.emit('open', fullname);
            });

            //
            // Remark: It is possible that in the time it has taken to find the
            // next logfile to be written more data than `maxSize` has been buffered,
            // but for sensible limits (10s - 100s of MB) this seems unlikely in less
            // than one second.
            //
            self.flush();
            compressFile();

        }

        function processRotate(targetDate) {
            if (!self.formatCurrent) rotateFile(targetDate);
            self._year = self._getTime('year');
            self._month = self._getTime('month');
            self._date = self._getTime('date');
            self._hour = self._getTime('hour');
            self._minute = self._getTime('minute');
            self._weekday = weekday[self._getTime('day')];
            self._created = 0;
        }

        function rotateFile(last_modify) {
            if (self._stream) {
                self._stream.close();
                self._stream.destroySoon();
            }
            if (!self.formatCurrent) {
                let src = fullname;
                let dst = path.join(self.dirname, self._getPreviousFilename(last_modify));
                if (fs.existsSync(src) && !fs.existsSync(dst)) {
                    fs.renameSync(src, dst);
                    self._stream = fs.createWriteStream(dst, self.options);
                }
            }
        }

        function compressFile() {
            let logfile = self._archive;
            self._archive = false;
            if (logfile && fs.existsSync(String(logfile))) {
                if (self._created) {
                    while (fs.existsSync(logfile + '.gz')) {
                        self._created += 1;
                        let next_filename = path.join(self.dirname, self._getPreviousFilename(new Date())) + '.' + self._created;
                        fs.renameSync(logfile, next_filename);
                        logfile = next_filename;
                    }
                }

                let gzip = zlib.createGzip();
                const sourceLog = fs.createReadStream(logfile);
                const destinationGz = fs.createWriteStream(logfile + '.gz');
                Stream.pipeline(sourceLog, gzip, destinationGz, (err) => {
                        if (err) {
                            console.log('zip file error occurred:', err);
                        }
                    }
                );
                try {
                    destinationGz.on('close', function(){
                        console.log("zip "+logfile+".gz  is success.")
                        try {
                            fs.unlinkSync(logfile);
                        } catch (error) {
                            console.log(logfile + " can't delete file : " + error)
                          }
                      })
                } catch (err) { 
                    console.log("event on close is error :  " + err)
                }

            }
        }

        fs.stat(fullname, function (err, stats) {
            if (err) {
                if (err.code !== 'ENOENT') {
                    return self.emit('error', err);
                }

                return createAndFlush(0);
            }

            if (!stats || (self.maxSize && stats.size >= self.maxSize)) {
  
                let new_filename = self._getFile(true);
                if (!self.formatCurrent) {
                    let src = fullname;
                    let dst = self._created ?
                        path.join(self.dirname, self._getPreviousFilename(new Date())) + '.' + self._created :
                        path.join(self.dirname, self._getPreviousFilename(new Date()));
                    if (fs.existsSync(src)) {
                        while (fs.existsSync(dst)) {
                            self._created += 1;
                            dst = path.join(self.dirname, self._getPreviousFilename(new Date())) + '.' + self._created;
                        }
                        fs.renameSync(src, dst);
                        self._stream = fs.createWriteStream(dst, self.options);
                    }
                }

                return checkFile(new_filename);
            }

            if (self._filenameHasExpired()) {
                console.log(" fs.stat _filenameHasExpired ")
                processRotate();
                self._fileExpireWhenRunning = true;
                return checkFile(self._getFile());
            }

            createAndFlush(stats.size);
        });
    })(this._getFile());
};

//
// ### @private function _getFile ()
// Gets the next filename to use for this instance
// in the case that log filesizes are being capped.
//
DailyRotateFile.prototype._getFile = function (inc) {
    let filename = this._getFilename();
    let remaining;

    if (inc) {
        //
        // Increment the number of files created or
        // checked by this instance.
        //
        // Check for maxFiles option and delete file
        if (this.maxFiles && (this._created >= (this.maxFiles - 1))) {
            remaining = this._created - (this.maxFiles - 1);
            if (remaining === 0) {
                try {
                    fs.unlinkSync(path.join(this.dirname, filename));
                } catch (e) {}
            } else {
                try {
                    fs.unlinkSync(path.join(this.dirname, filename + '.' + remaining));
                } catch (e) {}
            }
        }

        this._created += 1;
    } else if (!this.maxSize) {
        //
        // If the filename does not exist in the _currentFiles array then add it.
        if (this._currentFiles.indexOf(filename) === -1) {
            this._currentFiles.push(filename);
        }

        // While the _currentFiles array contains more file names than is configured
        // in maxFiles loop the _currentFiles array and delete the file found at el
        // 0.
        while (this.maxFiles && (this._currentFiles.length > this.maxFiles)) {
            try {
                fs.unlinkSync(path.join(this.dirname, this._currentFiles[0]));
            } catch (e) {
                // File isn't accessible, do nothing.
            }

            // Remove the filename that was just deleted from the _currentFiles array.
            this._currentFiles = this._currentFiles.slice(1);
        }
    }

    return this._created && this.formatCurrent ? filename + '.' + this._created : filename;
};



//
// ### @private function _getFilename ()
// Returns the log filename depending on `this.prepend` option value
//
DailyRotateFile.prototype._getFilename = function () {
    let formattedDate = '';
    let res = this._basename;

    if (this.formatCurrent) this.getFormattedDate();

    if (this.prepend) {
        if (this.datePattern === '.yyyy-MM-dd') {
            this.datePattern = 'yyyy-MM-dd.';
            formattedDate = this.getFormattedDate();
        }
        res = formattedDate + res;
    }
    if (this.append) {
        if (this.datePattern === 'yyyy-MM-dd.') {
            this.datePattern = '.yyyy-MM-dd';
            formattedDate = this.getFormattedDate();
        }
        res = res + formattedDate;
    }

    let dateValue = formattedDate;
    return eval("`" + res + "`");
};
DailyRotateFile.prototype._getPreviousFilename = function (last_modify) {
    let now = new Date();
    let yesterday = new Date(new Date().setDate(now.getDate() - 1));
    let targetDate = last_modify || yesterday;
    let formattedDate = this.getFormattedDate(targetDate);
    let res = this._basename;

    if (this.prepend) {
        if (this.datePattern === '.yyyy-MM-dd') {
            this.datePattern = 'yyyy-MM-dd.';
            formattedDate = this.getFormattedDate(targetDate);
        }
        res = formattedDate + res;
    }
    if (this.append) {
        if (this.datePattern === 'yyyy-MM-dd.') {
            this.datePattern = '.yyyy-MM-dd';
            formattedDate = this.getFormattedDate(targetDate);
        }
        res = res + formattedDate;
    }

    let dateValue = formattedDate;
    return eval("`" + res + "`");
};

//
// ### @private function _lazyDrain ()
// Lazily attempts to emit the `logged` event when `this.stream` has
// drained. This is really just a simple mutex that only works because
// Node.js is single-threaded.
//
DailyRotateFile.prototype._lazyDrain = function () {
    let self = this;

    if (!this._draining && this._stream) {
        this._draining = true;

        this._stream.once('drain', function () {
            self._draining = false;
            self.emit('logged');
        });
    }
};

//
// ### @private function _filenameHasExpired ()
// Checks whether the current log file is valid
// based on given datepattern
//
DailyRotateFile.prototype._filenameHasExpired = function () {
    // searching for m is enough to say minute in date pattern

    if (this.datePattern.match(/m/)) {
        return (this._year < this._getTime('year') || this._month < this._getTime('month') || this._date < this._getTime('date') || this._hour < this._getTime('hour') || this._minute < this._getTime('minute'));
    } else if (this.datePattern.match(/H/)) {
        return (this._year < this._getTime('year') || this._month < this._getTime('month') || this._date < this._getTime('date') || this._hour < this._getTime('hour'));
    } else if (this.datePattern.match(/d/)) {
        return (this._year < this._getTime('year') || this._month < this._getTime('month') || this._date < this._getTime('date'));
    } else if (this.datePattern.match(/M/)) {
        return (this._year < this._getTime('year') || this._month < this._getTime('month'));
    } else if (this.datePattern.match(/yy/)) {
        return (this._year < this._getTime('year'));
    }
    return false;
};

//
// ### @private function _getTime ()
// Get current date/time
// based on localTime config
//
DailyRotateFile.prototype._getTime = function (timeType, genDate) {
    let now = genDate || new Date();

    if (this.localTime) {
        if (timeType === 'year') {
            return now.getFullYear();
        } else if (timeType === 'month') {
            return now.getMonth();
        } else if (timeType === 'date') {
            return now.getDate();
        } else if (timeType === 'hour') {
            return now.getHours();
        } else if (timeType === 'minute') {
            return now.getMinutes();
        } else if (timeType === 'day') {
            return now.getDay();
        }
    }
    if (timeType === 'year') {
        return now.getUTCFullYear();
    } else if (timeType === 'month') {
        return now.getUTCMonth();
    } else if (timeType === 'date') {
        return now.getUTCDate();
    } else if (timeType === 'hour') {
        return now.getUTCHours();
    } else if (timeType === 'minute') {
        return now.getUTCMinutes();
    } else if (timeType === 'day') {
        return now.getUTCDay();
    }
};

// ### @private function _cleanOldFiles ()
// Remove old log files
// based on "maxDays" option
DailyRotateFile.prototype._cleanOldFiles = function () {
    let self = this;
    let millisecondsInDay = 86400000;
    let now = Date.now();

    function removeOldFile(file) {
        fs.unlink(self.dirname + path.sep + file, function (errUnlink) {
            if (errUnlink) {
                console.error('Error removing file ', file);
            }
        });
    }

    function tryToRemoveLogFile(file) {
        let completeFileName = self.dirname + path.sep + file;
        fs.stat(completeFileName, function (errStats, stats) {
            if (errStats) {
                console.error('Error stats file ', file, errStats);
                return;
            }

            let lastChangeTimestamp = ((stats.mtime && stats.mtime.getTime()) || 0);
            let lifeTime = now - lastChangeTimestamp;
            if (stats.isFile() && lifeTime > (millisecondsInDay * self.maxDays)) {
                removeOldFile(file);
            }
        });
    }

    // if not maxDays specified, do not remove old log files
    if (self.maxDays) {
        fs.readdir(self.dirname, function (err, files) {
            if (err) {
                console.error('Error reading directory ', self.dirname, err);
                return;
            }

            files.forEach(function (file) {

                var fileNameReg = new RegExp(self._baseNameRemoveFile.replace('${dateValue}', '(.*)'), 'g');
                if (/.log/.test(file) && fileNameReg.test(file)) {
                    tryToRemoveLogFile(file);
                }
                var fileNameRegzippedArchive = new RegExp(self._baseNameRemoveFile.replace('${dateValue}', '(.*)'), 'g');
                if (/.log.gz/.test(file) && fileNameRegzippedArchive.test(file)) {
                    tryToRemoveLogFile(file);
                }


            });
        });
    }
};

//
// Inherit from `winston.Transport`.
//
util.inherits(DailyRotateFile, Transport);

/**
 * Define a getter so that `winston.transports.DailyRotateFile`
 * is available and thus backwards compatible.
 */
winston.transports.DailyRotateFile = DailyRotateFile;

//
// Expose the name of this Transport on the prototype
//
DailyRotateFile.prototype.name = 'dailyRotateFile';